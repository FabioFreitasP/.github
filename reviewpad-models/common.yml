api-version: reviewpad.com/v3.x

metrics-on-merge: true

extends:
  - https://github.com/reviewpad/.github/blob/main/reviewpad-models/change-type.yml
  - https://github.com/reviewpad/.github/blob/main/reviewpad-models/ship-show-ask.yml

labels:
  small:
    color: "#294b69"
  medium:
    color: "#a8c3f7"
  large:
    color: "#8a2138"

groups:
  - name: bots
    spec: '["renovate[bot]"]'
  - name: HoE
    spec: '["ferreiratiago"]'

rules:
  # Check if the pull request has a change type.
  # This rule requires the extended file
  # https://github.com/reviewpad/.github/blob/main/reviewpad-models/change-type.yml
  - name: has-change-type
    description: "The pull request does not have a change type."
    spec: $rule("is-bug-fix") || $rule("is-new-feature") || $rule("is-improvements") || $rule("is-breaking-change")

workflows:
  # Label a pull request based on the number of files changed.
  # This is useful for filtering pull requests in the pull request list.
  - name: size-labeler
    always-run: true
    if:
      - rule: $size() <= 30
        extra-actions:
          - $addLabel("small")
      - rule: $size() > 30 && $size() <= 100
        extra-actions:
          - $addLabel("medium")
      - rule: $size() > 100
        extra-actions:
          - $addLabel("large")

  # Check if the pull request commits and title follow the conventional commits specification.
  # This is useful for generating changelogs.
  # The title is checked because it can be used as the commit message when merging.
  - name: commit-compliance
    always-run: true
    if:
      - rule: '!$isDraft()'
        extra-actions:
          - $commitLint()
          - $titleLint()

  # Check if the pull request/issue has a description.
  # This is a must to help a contributor to understand the context of the pull request/issue.
  - name: empty-description
    always-run: true
    on:
      - pull_request
      - issue
    if:
      - rule: $description() == ""
        extra-actions:
          - $close("Automatically closing this issue/pull request. Please add a description.")

  # Welcome a first-time pull request contributor.
  # This is useful for making the contributor feel welcome.
  - name: first-time-contributor-pull-request
    always-run: true
    if:
      - $pullRequestCountBy($author(), "all") == 1
    then:
      - $commentOnce($sprintf("Welcome @%v! Thank you so much for your first pull request! The team will review it as soon as possible.", [$author()]))

  # Welcome a first-time issue contributor.
  # This is useful for making the contributor feel welcome.
  - name: first-time-contributor-issue
    always-run: true
    on:
      - issue
    if:
      - $issueCountBy($author(), "all") == 1
    then:
      - $commentOnce($sprintf("Welcome @%v! Thank you so much for your first issue!", [$author()]))

  # Link an issue to Reviewpad project.
  # This is useful for tracking the progress of the issue.
  - name: link-to-project
    always-run: true
    on:
      - issue
    if:
      - rule: $state() == "open" && !$isLinkedToProject("Reviewpad")
        extra-actions:
          - $addToProject("Reviewpad", "Backlog")
      - rule: $state() == "closed"
        extra-actions:
          - $addToProject("Reviewpad", "Done")

pipelines:
  # Assign a pull request to a reviewer when it is ready to be reviewed.
  - name: assignment
    trigger: $assignees() == [] && !$isElementOf($author(), $group("bots"))
    stages:
      - actions:
          - $info("The pull request is still in draft. Reviewpad will only assign a reviewer when it is ready to be reviewed.")
        until: '!$isDraft()'
      # Check if the pull request author has too many open pull requests.
      # This is useful for avoiding a contributor to be overwhelmed by too many pull requests.
      - actions:
          - $error("You have too many open pull requests. Please close some of them before opening a new one. Reviewpad will only assign a reviewer when you have less than 3 open pull requests.")
        until: $pullRequestCountBy($author(), "open") < 3
      # Check if the pull request has a change type.
      # This is useful for filtering pull requests in the pull request list.
      - actions:
          - $error("The pull request does not have a type of change. Please add one by editing to the pull request description and uncommenting at least one of the types of change. Reviewpad will only assign a reviewer when the pull request has a type of change.")
        until: $rule("has-change-type")
      # Check if the pull request has a git conflicts.
      # This is useful for avoiding merge conflicts.
      - actions:
          - $error("The pull request has git conflicts. Please fix them. Reviewpad will only assign a reviewer when they are fixed.")
        until: '!$hasGitConflicts()'
      # Check if the pull request has a linked issue.
      # This is useful for tracking the progress of the pull request.
      - actions:
          - $error("The pull request does not have a linked issue. Please link one. Reviewpad will only assign a reviewer when the pull request is linked to an issue.")
        until: $hasLinkedIssues()
      # Check if the pull request is up to date with the base branch.
      # This is useful for avoiding merge commits.
      - actions:
          - $error("The pull request it not up to date with the base branch. Please rebase it. Reviewpad will only assign a reviewer when the pull request is up to date with the base branch.")
        until: $isUpdatedWithBaseBranch()
      # Check if the pull request has a linear history.
      # This is useful for avoiding merge commits.
      - actions:
          - $error("The pull request does not have a linear history. Please fix it. Reviewpad will only assign a reviewer when the pull request has a linear history.")
        until: $hasLinearHistory()
      # Check if the pull request has all checks completed with success.
      # This is useful for avoiding a reviewer to review a pull request that is not ready to be reviewed.
      - actions:
          - $warn("The pull request does not have all checks completed with success. If checks are still running, Reviewpad will only assign a reviewer when all checks have completed. If checks have failed, please fix them.")
        until: $haveAllChecksRunCompleted(["reviewpad"], "success")
      # At this point, the pull request is ready to be reviewed.
      - actions:
          - $assignAssignees([$author()])
          - $assignCodeAuthorReviewers(1, ["marcelosousa", "fmallet", "monicalacerda", "reviewpad-bot", "adrianoapmartins", "simonbrandhof"])

  # Merge a pull request when it is ready to be merged.
  - name: merge
    trigger: $state() == "open" && $assignees() != [] && !$rule("is-ship") && !$isElementOf($author(), $group("bots"))
    stages:
      - actions:
          - $review("REQUEST_CHANGES", "Pull request has do-not-merge label. Blocking merge with request changes.")
        until: '!$isElementOf("do-not-merge", $labels())'
      # Check if the pull request has git conflicts.
      - actions:
          - $review("REQUEST_CHANGES", "Pull request has merge conflicts. Please fix them.")
        until: '!$hasGitConflicts()'
      # Check needs for manual rebase.
      - actions:
          - $review("REQUEST_CHANGES", "Pull request is not rebaseable. You will need to rebase it manually. Reviewpad will only merge the pull request when it is rebaseable.")
        until: $selectFromContext("$.rebaseable") == "true"
      # Check if the pull request is up to date with the base branch.
      # If not, rebase it.
      - actions:
          - $comment("Pull request is not up to date with the base branch. Reviewpad will rebase it for you. Please wait for the rebase to complete.")
          - $rebase()
        until: $isUpdatedWithBaseBranch() && $hasLinearHistory()
      # Check if the pull request has all checks completed with success.
      - actions:
          - $addLabel("waiting-checks")
        until: $haveAllChecksRunCompleted(["reviewpad"], "success")
      # Check if the pull request is still waiting for review.
      # If yes, create a review to block the merge.
      - actions:
          - $info("Pull request is still waiting for review.")
          - $removeLabels(["waiting-checks"])
          - $addLabel("waiting-review")
        until: $requestedReviewers() == []
      # Check if the pull request is still waiting for approval.
      # If yes, create a review to block the merge.
      - actions:
          - $info("Pull request is still waiting for approval.")
          - $removeLabels(["waiting-checks", "waiting-review"])
          - $addLabel("waiting-approval")
        until: $approvalsCount() > 0
      # When the pull request has been approved by the reviewer,
      # then request an approval to HoE.
      - actions:
          - $info($sprintf("Pull request has been approved by the reviewer and it is now waiting for approval from the @%s.", $group("HoE")) )
          - $removeLabels(["waiting-checks", "waiting-review"])
          - $addLabel("waiting-approval")
          - $assignReviewer($group("HoE"))
        until: $hasRequiredApprovals(1, $group("HoE"))
      # At this point, the pull request is ready to be merged.
      - actions:
          - $removeLabels(["waiting-checks", "waiting-review", "waiting-approval"])
          - $approve("Pull request is ready to be merged. Reviewpad will merge it for you. Please wait for the merge to complete.")
          - $merge("squash")
